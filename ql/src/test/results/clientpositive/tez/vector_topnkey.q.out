PREHOOK: query: explain vectorization detail
SELECT key, SUM(CAST(SUBSTR(value,5) AS INT)) FROM src GROUP BY key ORDER BY key LIMIT 5
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
SELECT key, SUM(CAST(SUBSTR(value,5) AS INT)) FROM src GROUP BY key ORDER BY key LIMIT 5
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:5
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_22]
        Limit [LIM_21] (rows=5 width=95)
          Number of rows:5
          Select Operator [SEL_20] (rows=250 width=95)
            Output:["_col0","_col1"]
          <-Reducer 2 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_19]
              Group By Operator [GBY_18] (rows=250 width=95)
                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                Top N Key Operator [TNK_17] (rows=250 width=95)
                  keys:KEY._col0,sort order:+,top n:5
                <-Map 1 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_16]
                    PartitionCols:_col0
                    Group By Operator [GBY_15] (rows=250 width=95)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Select Operator [SEL_14] (rows=500 width=178)
                        Output:["_col0","_col1"]
                        Top N Key Operator [TNK_13] (rows=500 width=178)
                          keys:key,sort order:+,top n:5
                          TableScan [TS_0] (rows=500 width=178)
                            default@src,src,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]

PREHOOK: query: SELECT key, SUM(CAST(SUBSTR(value,5) AS INT)) FROM src GROUP BY key ORDER BY key LIMIT 5
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT key, SUM(CAST(SUBSTR(value,5) AS INT)) FROM src GROUP BY key ORDER BY key LIMIT 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	0
10	10
100	200
103	206
104	208
PREHOOK: query: explain vectorization detail
SELECT key FROM src GROUP BY key ORDER BY key LIMIT 5
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
SELECT key FROM src GROUP BY key ORDER BY key LIMIT 5
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:5
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_21]
        Limit [LIM_20] (rows=5 width=87)
          Number of rows:5
          Select Operator [SEL_19] (rows=250 width=87)
            Output:["_col0"]
          <-Reducer 2 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_18]
              Group By Operator [GBY_17] (rows=250 width=87)
                Output:["_col0"],keys:KEY._col0
                Top N Key Operator [TNK_16] (rows=250 width=87)
                  keys:KEY._col0,sort order:+,top n:5
                <-Map 1 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_15]
                    PartitionCols:_col0
                    Group By Operator [GBY_14] (rows=250 width=87)
                      Output:["_col0"],keys:key
                      Select Operator [SEL_13] (rows=500 width=87)
                        Output:["key"]
                        Top N Key Operator [TNK_12] (rows=500 width=87)
                          keys:key,sort order:+,top n:5
                          TableScan [TS_0] (rows=500 width=87)
                            default@src,src,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]

PREHOOK: query: SELECT key FROM src GROUP BY key ORDER BY key LIMIT 5
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT key FROM src GROUP BY key ORDER BY key LIMIT 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
0
10
100
103
104
PREHOOK: query: explain vectorization detail
SELECT src1.key, src2.value FROM src src1 JOIN src src2 ON (src1.key = src2.key) ORDER BY src1.key LIMIT 5
PREHOOK: type: QUERY
POSTHOOK: query: explain vectorization detail
SELECT src1.key, src2.value FROM src src1 JOIN src src2 ON (src1.key = src2.key) ORDER BY src1.key LIMIT 5
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:5
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_32]
        Limit [LIM_31] (rows=5 width=178)
          Number of rows:5
          Select Operator [SEL_30] (rows=809 width=178)
            Output:["_col0","_col1"]
          <-Reducer 2 [SIMPLE_EDGE]
            SHUFFLE [RS_10]
              Select Operator [SEL_9] (rows=809 width=178)
                Output:["_col0","_col1"]
                Top N Key Operator [TNK_18] (rows=809 width=178)
                  keys:_col0,sort order:+,top n:5
                  Merge Join Operator [MERGEJOIN_21] (rows=809 width=178)
                    Conds:RS_25._col0=RS_29._col0(Inner),Output:["_col0","_col2"]
                  <-Map 1 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_25]
                      PartitionCols:_col0
                      Select Operator [SEL_24] (rows=500 width=87)
                        Output:["_col0"]
                        Filter Operator [FIL_23] (rows=500 width=87)
                          predicate:key is not null
                          Top N Key Operator [TNK_22] (rows=500 width=87)
                            keys:key,sort order:+,top n:5
                            TableScan [TS_0] (rows=500 width=87)
                              default@src,src1,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
                  <-Map 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_29]
                      PartitionCols:_col0
                      Select Operator [SEL_28] (rows=500 width=178)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_27] (rows=500 width=178)
                          predicate:key is not null
                          Top N Key Operator [TNK_26] (rows=500 width=178)
                            keys:key,sort order:+,top n:5
                            TableScan [TS_3] (rows=500 width=178)
                              default@src,src2,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]

PREHOOK: query: SELECT src1.key, src2.value FROM src src1 JOIN src src2 ON (src1.key = src2.key) ORDER BY src1.key LIMIT 5
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT src1.key, src2.value FROM src src1 JOIN src src2 ON (src1.key = src2.key) ORDER BY src1.key LIMIT 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
PREHOOK: query: create table store_sales
(
    ss_sold_time_sk           bigint,
    ss_item_sk                bigint,
    ss_customer_sk            bigint,
    ss_cdemo_sk               bigint,
    ss_hdemo_sk               bigint,
    ss_addr_sk                bigint,
    ss_store_sk               bigint,
    ss_promo_sk               bigint,
    ss_ticket_number          bigint,
    ss_quantity               int,
    ss_wholesale_cost         double,
    ss_list_price             double,
    ss_sales_price            double,
    ss_ext_discount_amt       double,
    ss_ext_sales_price        double,
    ss_ext_wholesale_cost     double,
    ss_ext_list_price         double,
    ss_ext_tax                double,
    ss_coupon_amt             double,
    ss_net_paid               double,
    ss_net_paid_inc_tax       double,
    ss_net_profit             double
)
partitioned by (ss_sold_date_sk bigint)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@store_sales
POSTHOOK: query: create table store_sales
(
    ss_sold_time_sk           bigint,
    ss_item_sk                bigint,
    ss_customer_sk            bigint,
    ss_cdemo_sk               bigint,
    ss_hdemo_sk               bigint,
    ss_addr_sk                bigint,
    ss_store_sk               bigint,
    ss_promo_sk               bigint,
    ss_ticket_number          bigint,
    ss_quantity               int,
    ss_wholesale_cost         double,
    ss_list_price             double,
    ss_sales_price            double,
    ss_ext_discount_amt       double,
    ss_ext_sales_price        double,
    ss_ext_wholesale_cost     double,
    ss_ext_list_price         double,
    ss_ext_tax                double,
    ss_coupon_amt             double,
    ss_net_paid               double,
    ss_net_paid_inc_tax       double,
    ss_net_profit             double
)
partitioned by (ss_sold_date_sk bigint)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@store_sales
PREHOOK: query: create table customer_demographics
(
    cd_demo_sk                bigint,
    cd_gender                 string,
    cd_marital_status         string,
    cd_education_status       string,
    cd_purchase_estimate      int,
    cd_credit_rating          string,
    cd_dep_count              int,
    cd_dep_employed_count     int,
    cd_dep_college_count      int
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@customer_demographics
POSTHOOK: query: create table customer_demographics
(
    cd_demo_sk                bigint,
    cd_gender                 string,
    cd_marital_status         string,
    cd_education_status       string,
    cd_purchase_estimate      int,
    cd_credit_rating          string,
    cd_dep_count              int,
    cd_dep_employed_count     int,
    cd_dep_college_count      int
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@customer_demographics
PREHOOK: query: create table date_dim
(
    d_date_sk                 bigint,
    d_date_id                 string,
    d_date                    string,
    d_month_seq               int,
    d_week_seq                int,
    d_quarter_seq             int,
    d_year                    int,
    d_dow                     int,
    d_moy                     int,
    d_dom                     int,
    d_qoy                     int,
    d_fy_year                 int,
    d_fy_quarter_seq          int,
    d_fy_week_seq             int,
    d_day_name                string,
    d_quarter_name            string,
    d_holiday                 string,
    d_weekend                 string,
    d_following_holiday       string,
    d_first_dom               int,
    d_last_dom                int,
    d_same_day_ly             int,
    d_same_day_lq             int,
    d_current_day             string,
    d_current_week            string,
    d_current_month           string,
    d_current_quarter         string,
    d_current_year            string
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@date_dim
POSTHOOK: query: create table date_dim
(
    d_date_sk                 bigint,
    d_date_id                 string,
    d_date                    string,
    d_month_seq               int,
    d_week_seq                int,
    d_quarter_seq             int,
    d_year                    int,
    d_dow                     int,
    d_moy                     int,
    d_dom                     int,
    d_qoy                     int,
    d_fy_year                 int,
    d_fy_quarter_seq          int,
    d_fy_week_seq             int,
    d_day_name                string,
    d_quarter_name            string,
    d_holiday                 string,
    d_weekend                 string,
    d_following_holiday       string,
    d_first_dom               int,
    d_last_dom                int,
    d_same_day_ly             int,
    d_same_day_lq             int,
    d_current_day             string,
    d_current_week            string,
    d_current_month           string,
    d_current_quarter         string,
    d_current_year            string
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@date_dim
PREHOOK: query: create table store
(
    s_store_sk                bigint,
    s_store_id                string,
    s_rec_start_date          string,
    s_rec_end_date            string,
    s_closed_date_sk          bigint,
    s_store_name              string,
    s_number_employees        int,
    s_floor_space             int,
    s_hours                   string,
    s_manager                 string,
    s_market_id               int,
    s_geography_class         string,
    s_market_desc             string,
    s_market_manager          string,
    s_division_id             int,
    s_division_name           string,
    s_company_id              int,
    s_company_name            string,
    s_street_number           string,
    s_street_name             string,
    s_street_type             string,
    s_suite_number            string,
    s_city                    string,
    s_county                  string,
    s_state                   string,
    s_zip                     string,
    s_country                 string,
    s_gmt_offset              double,
    s_tax_precentage          double
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@store
POSTHOOK: query: create table store
(
    s_store_sk                bigint,
    s_store_id                string,
    s_rec_start_date          string,
    s_rec_end_date            string,
    s_closed_date_sk          bigint,
    s_store_name              string,
    s_number_employees        int,
    s_floor_space             int,
    s_hours                   string,
    s_manager                 string,
    s_market_id               int,
    s_geography_class         string,
    s_market_desc             string,
    s_market_manager          string,
    s_division_id             int,
    s_division_name           string,
    s_company_id              int,
    s_company_name            string,
    s_street_number           string,
    s_street_name             string,
    s_street_type             string,
    s_suite_number            string,
    s_city                    string,
    s_county                  string,
    s_state                   string,
    s_zip                     string,
    s_country                 string,
    s_gmt_offset              double,
    s_tax_precentage          double
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@store
PREHOOK: query: create table item
(
    i_item_sk                 bigint,
    i_item_id                 string,
    i_rec_start_date          string,
    i_rec_end_date            string,
    i_item_desc               string,
    i_current_price           double,
    i_wholesale_cost          double,
    i_brand_id                int,
    i_brand                   string,
    i_class_id                int,
    i_class                   string,
    i_category_id             int,
    i_category                string,
    i_manufact_id             int,
    i_manufact                string,
    i_size                    string,
    i_formulation             string,
    i_color                   string,
    i_units                   string,
    i_container               string,
    i_manager_id              int,
    i_product_name            string
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@item
POSTHOOK: query: create table item
(
    i_item_sk                 bigint,
    i_item_id                 string,
    i_rec_start_date          string,
    i_rec_end_date            string,
    i_item_desc               string,
    i_current_price           double,
    i_wholesale_cost          double,
    i_brand_id                int,
    i_brand                   string,
    i_class_id                int,
    i_class                   string,
    i_category_id             int,
    i_category                string,
    i_manufact_id             int,
    i_manufact                string,
    i_size                    string,
    i_formulation             string,
    i_color                   string,
    i_units                   string,
    i_container               string,
    i_manager_id              int,
    i_product_name            string
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@item
PREHOOK: query: select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
PREHOOK: query: explain analyze
select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain analyze
select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_97]
        Limit [LIM_96] (rows=1/1 width=8)
          Number of rows:100
          Select Operator [SEL_95] (rows=1/1 width=8)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_94]
              Select Operator [SEL_93] (rows=1/1 width=8)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                Group By Operator [GBY_92] (rows=1/1 width=8)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["avg(VALUE._col0)","avg(VALUE._col1)","avg(VALUE._col2)","avg(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2
                  Top N Key Operator [TNK_91] (rows=3/1 width=8)
                    keys:KEY._col0, KEY._col1,sort order:++,top n:100
                  <-Reducer 5 [SIMPLE_EDGE]
                    SHUFFLE [RS_30]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_29] (rows=3/1 width=8)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["avg(_col2)","avg(_col3)","avg(_col4)","avg(_col5)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_27] (rows=1/0 width=8)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Top N Key Operator [TNK_57] (rows=1/0 width=8)
                            keys:_col13, _col11,sort order:++,top n:100
                            Merge Join Operator [MERGEJOIN_72] (rows=1/0 width=8)
                              Conds:RS_24._col1=RS_90._col0(Inner),Output:["_col3","_col4","_col5","_col6","_col11","_col13"]
                            <-Map 11 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_90]
                                PartitionCols:_col0
                                Select Operator [SEL_89] (rows=1/0 width=560)
                                  Output:["_col0"]
                                  Filter Operator [FIL_88] (rows=1/0 width=560)
                                    predicate:((cd_education_status = '2 yr Degree') and (cd_gender = 'M') and (cd_marital_status = 'U') and cd_demo_sk is not null)
                                    TableScan [TS_12] (rows=1/0 width=560)
                                      default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_gender","cd_marital_status","cd_education_status"]
                            <-Reducer 4 [SIMPLE_EDGE]
                              SHUFFLE [RS_24]
                                PartitionCols:_col1
                                Top N Key Operator [TNK_58] (rows=1/0 width=8)
                                  keys:_col13, _col11,sort order:++,top n:100
                                  Merge Join Operator [MERGEJOIN_71] (rows=1/0 width=8)
                                    Conds:RS_21._col0=RS_87._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col11","_col13"]
                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_87]
                                      PartitionCols:_col0
                                      Select Operator [SEL_86] (rows=1/0 width=192)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_85] (rows=1/0 width=192)
                                          predicate:i_item_sk is not null
                                          Top N Key Operator [TNK_84] (rows=1/0 width=192)
                                            keys:i_item_id,sort order:+,top n:100
                                            TableScan [TS_9] (rows=1/0 width=192)
                                              default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id"]
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_21]
                                      PartitionCols:_col0
                                      Top N Key Operator [TNK_59] (rows=1/0 width=8)
                                        keys:_col1, _col11,sort order:++,top n:100
                                        Merge Join Operator [MERGEJOIN_70] (rows=1/0 width=8)
                                          Conds:RS_18._col2=RS_83._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col6","_col11"]
                                        <-Map 9 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_83]
                                            PartitionCols:_col0
                                            Select Operator [SEL_82] (rows=1/0 width=192)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_81] (rows=1/0 width=192)
                                                predicate:((s_state) IN ('SD', 'FL', 'MI', 'LA', 'MO', 'SC') and s_store_sk is not null)
                                                Top N Key Operator [TNK_80] (rows=1/0 width=192)
                                                  keys:s_state,sort order:+,top n:100
                                                  TableScan [TS_6] (rows=1/0 width=192)
                                                    default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_state"]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_18]
                                            PartitionCols:_col2
                                            Top N Key Operator [TNK_60] (rows=1/0 width=8)
                                              keys:_col1, _col0,sort order:++,top n:100
                                              Merge Join Operator [MERGEJOIN_69] (rows=1/0 width=8)
                                                Conds:RS_76._col7=RS_79._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_76]
                                                  PartitionCols:_col7
                                                  Select Operator [SEL_75] (rows=1/0 width=8)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                    Filter Operator [FIL_74] (rows=1/0 width=8)
                                                      predicate:(ss_cdemo_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                      Top N Key Operator [TNK_73] (rows=1/0 width=8)
                                                        keys:ss_cdemo_sk, ss_item_sk,sort order:++,top n:100
                                                        TableScan [TS_0] (rows=1/0 width=8)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_cdemo_sk","ss_store_sk","ss_quantity","ss_list_price","ss_sales_price","ss_coupon_amt"]
                                              <-Map 8 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_79]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_78] (rows=1/0 width=12)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_77] (rows=1/0 width=12)
                                                      predicate:((d_year = 2001) and d_date_sk is not null)
                                                      TableScan [TS_3] (rows=1/0 width=12)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]

PREHOOK: query: drop table store_sales
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@store_sales
PREHOOK: Output: default@store_sales
POSTHOOK: query: drop table store_sales
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: default@store_sales
PREHOOK: query: drop table customer_demographics
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@customer_demographics
PREHOOK: Output: default@customer_demographics
POSTHOOK: query: drop table customer_demographics
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Output: default@customer_demographics
PREHOOK: query: drop table date_dim
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@date_dim
PREHOOK: Output: default@date_dim
POSTHOOK: query: drop table date_dim
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@date_dim
POSTHOOK: Output: default@date_dim
PREHOOK: query: drop table store
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@store
PREHOOK: Output: default@store
POSTHOOK: query: drop table store
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@store
POSTHOOK: Output: default@store
PREHOOK: query: drop table item
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@item
PREHOOK: Output: default@item
POSTHOOK: query: drop table item
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@item
POSTHOOK: Output: default@item
